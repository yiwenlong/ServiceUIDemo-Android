final String SERVER_BRIDGE_PATH = projectDir.getAbsolutePath() + "/src/main/golang/server/bridge"
final String GOLANG_OUTPUT_BASE = buildDir.getAbsolutePath() + "/intermediates/golang"
final String GOLANG_OUTPUT_AAR = GOLANG_OUTPUT_BASE + "/server-bridge.aar"
final String GOLANG_OUTPUT_JAR = GOLANG_OUTPUT_BASE + "/server-bridge-sources.jar"
final String GOLANG_BUILD_SCRIPT= SERVER_BRIDGE_PATH + "/build.sh"
final String EXTRACT_SOURCE_PATH = buildDir.getAbsolutePath() + "/extraSources"

final File bridgeOutDir = file(GOLANG_OUTPUT_BASE)

task assembleGolangServer(type: Exec) {
    onlyIf {
        return false
    }
    doFirst {
        if (bridgeOutDir.exists()) {
            bridgeOutDir.deleteDir()
        }
        bridgeOutDir.mkdirs()
    }

    workingDir(SERVER_BRIDGE_PATH)
    commandLine(GOLANG_BUILD_SCRIPT, GOLANG_OUTPUT_AAR)
}

task extractGolangServerSources(type: Copy) {
    dependsOn(tasks.assembleGolangServer)

    from(zipTree(file(GOLANG_OUTPUT_AAR))) {
        include("**/*.so")
        eachFile {
            path = path.replace("jni/", "jniLibs/")
        }
    }

    from(zipTree(file(GOLANG_OUTPUT_JAR))) {
        include("**/*.java")
        into("classes")
    }
    destinationDir = file(EXTRACT_SOURCE_PATH)
}

task cleanGolangServerSources {

}