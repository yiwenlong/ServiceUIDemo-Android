//
// Copyright 2020 Yiwenlong(wlong.yi#gmail.com)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may obtain a copy of the License at
// you may not use this file except in compliance with the License.
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
final String GOLANG_SOURCE_DIR = projectDir.getAbsolutePath() + "/src/main/golang"
final String SERVER_BRIDGE_PATH = GOLANG_SOURCE_DIR + "/server/bridge"
final String GOLANG_OUTPUT_BASE = buildDir.getAbsolutePath() + "/intermediates/golang"
final String GOLANG_OUTPUT_AAR = GOLANG_OUTPUT_BASE + "/server-bridge.aar"
final String GOLANG_OUTPUT_JAR = GOLANG_OUTPUT_BASE + "/server-bridge-sources.jar"
final String GOLANG_BUILD_SCRIPT= SERVER_BRIDGE_PATH + "/build.sh"
final String EXTRACT_SOURCE_PATH = buildDir.getAbsolutePath() + "/extraSources"

final File bridgeOutDir = file(GOLANG_OUTPUT_BASE)

task assembleGolangServer(type: Exec) {

    onlyIf {
        long sourceFilesLastModified = file(GOLANG_SOURCE_DIR).lastModified()
        long outputFilesLastModified = bridgeOutDir.exists() ? bridgeOutDir.lastModified() : 0L
        return sourceFilesLastModified > outputFilesLastModified
    }

    doFirst {
        if (bridgeOutDir.exists()) {
            bridgeOutDir.deleteDir()
        }
        bridgeOutDir.mkdirs()
    }

    workingDir(SERVER_BRIDGE_PATH)
    commandLine(GOLANG_BUILD_SCRIPT, GOLANG_OUTPUT_AAR)
}

task extractGolangServerSources(type: Copy) {
    dependsOn(tasks.assembleGolangServer)

    from(zipTree(file(GOLANG_OUTPUT_AAR))) {
        include("**/*.so")
        eachFile {
            path = path.replace("jni/", "jniLibs/")
        }
    }

    from(zipTree(file(GOLANG_OUTPUT_JAR))) {
        include("**/*.java")
        into("classes")
    }
    destinationDir = file(EXTRACT_SOURCE_PATH)
}

task cleanGolangServerSources(type: Delete) {
    delete(EXTRACT_SOURCE_PATH)
    delete(GOLANG_OUTPUT_BASE)
}